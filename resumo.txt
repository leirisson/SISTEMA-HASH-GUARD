===============================================================================
                            RESUMO DA API HASHGUARD
===============================================================================

üìã INFORMA√á√ïES GERAIS
===============================================================================
Nome: HashGuard API
Vers√£o: 1.0.0
Descri√ß√£o: Sistema para preserva√ß√£o e verifica√ß√£o de evid√™ncias digitais
Framework: NestJS 10.x
Linguagem: TypeScript
Banco de Dados: SQLite (via Prisma ORM)
Porta: 3000
Documenta√ß√£o: http://localhost:3000/api/docs (Swagger)

üèóÔ∏è ARQUITETURA E M√ìDULOS
===============================================================================
A API est√° estruturada em m√≥dulos independentes seguindo padr√µes NestJS:

1. AppModule (Principal)
   - Configura√ß√£o global da aplica√ß√£o
   - Integra√ß√£o de todos os m√≥dulos
   - Configura√ß√£o do Multer para upload de arquivos

2. EvidenceModule
   - Gerenciamento de evid√™ncias digitais
   - Upload e armazenamento de arquivos
   - Extra√ß√£o de metadados EXIF

3. HashModule
   - Gera√ß√£o e valida√ß√£o de hashes SHA-256
   - Verifica√ß√£o de integridade de arquivos

4. SignatureModule
   - Assinatura digital usando PGP/OpenPGP
   - Gera√ß√£o autom√°tica de pares de chaves RSA 4096-bit
   - Verifica√ß√£o de autenticidade

5. TimestampModule
   - Carimbos de tempo via OpenTimestamps
   - Prova temporal na blockchain Bitcoin
   - Verifica√ß√£o de timestamps

6. CustodyModule
   - Cadeia de cust√≥dia completa
   - Rastreamento de todas as a√ß√µes
   - Valida√ß√£o de integridade da cadeia

7. VerificationModule
   - Verifica√ß√£o completa de evid√™ncias
   - C√°lculo de pontua√ß√£o de confian√ßa
   - Gera√ß√£o de relat√≥rios de verifica√ß√£o

8. MetadataModule
   - Extra√ß√£o de metadados EXIF
   - An√°lise de propriedades de arquivos

9. PrismaModule
   - Conex√£o com banco de dados
   - ORM para opera√ß√µes de dados

üìä BANCO DE DADOS
===============================================================================
Schema Principal:

Evidence (Evid√™ncias)
- id: UUID √∫nico
- filename: Nome do arquivo original
- path: Caminho no sistema de arquivos
- hash: Hash SHA-256 √∫nico
- exif: Metadados EXIF (JSON)
- collectedBy: Respons√°vel pela coleta
- collectedAt: Data/hora da coleta
- timestampFile: Arquivo de timestamp (.ots)
- signatureFile: Arquivo de assinatura (.sig)
- publicKey: Chave p√∫blica PGP
- createdAt/updatedAt: Timestamps do sistema

CustodyLog (Cadeia de Cust√≥dia)
- id: UUID √∫nico
- evidenceId: Refer√™ncia √† evid√™ncia
- action: Tipo de a√ß√£o (COLLECTED, STORED, ANALYZED, etc.)
- actor: Respons√°vel pela a√ß√£o
- details: Detalhes adicionais (JSON)
- createdAt: Timestamp da a√ß√£o

üåê ENDPOINTS DA API
===============================================================================

EVID√äNCIAS (/evidence)
- POST /evidence/upload
  * Upload de evid√™ncia digital
  * Suporte a multipart/form-data
  * Limite: 100MB por arquivo
  * Campos: file, collectedBy, collectedAt, description

- GET /evidence
  * Listar todas as evid√™ncias
  * Pagina√ß√£o: ?page=1&limit=10

- GET /evidence/id/:id
  * Buscar evid√™ncia por ID UUID

- GET /evidence/hash/:hash
  * Buscar evid√™ncia por hash SHA-256

- GET /evidence/:id/verify
  * Verificar integridade da evid√™ncia

VERIFICA√á√ÉO (/verification)
- POST /verification/:id/complete
  * Verifica√ß√£o completa (hash, assinatura, timestamp, cust√≥dia)
  * Pontua√ß√£o de confian√ßa 0-100%
  * Relat√≥rio detalhado com recomenda√ß√µes

- GET /verification/:id/quick
  * Verifica√ß√£o r√°pida apenas do hash
  * Resposta otimizada para performance

- GET /verification/:id/status
  * Status atual da evid√™ncia para verifica√ß√£o

CADEIA DE CUST√ìDIA (/custody)
- GET /custody/evidence/:evidenceId
  * Recuperar cadeia completa de uma evid√™ncia
  * Hist√≥rico cronol√≥gico de a√ß√µes

- GET /custody/evidence/:evidenceId/report
  * Relat√≥rio completo de cust√≥dia
  * Estat√≠sticas e resumo executivo

- GET /custody/evidence/:evidenceId/validate
  * Validar integridade da cadeia
  * Detec√ß√£o de inconsist√™ncias

- GET /custody/actor/:actor
  * Logs por respons√°vel/ator

- GET /custody/action/:action
  * Logs por tipo de a√ß√£o

SISTEMA
- GET /health
  * Health check da aplica√ß√£o
  * Status: ok, timestamp, service info

üîí RECURSOS DE SEGURAN√áA
===============================================================================

1. INTEGRIDADE DE DADOS
   - Hash SHA-256 para cada arquivo
   - Verifica√ß√£o autom√°tica de integridade
   - Detec√ß√£o de altera√ß√µes n√£o autorizadas

2. AUTENTICIDADE
   - Assinatura digital PGP/OpenPGP
   - Chaves RSA 4096-bit
   - Gera√ß√£o autom√°tica de pares de chaves
   - Verifica√ß√£o de autenticidade

3. PROVA TEMPORAL
   - Timestamps via OpenTimestamps
   - Ancoragem na blockchain Bitcoin
   - Prova criptogr√°fica de exist√™ncia temporal

4. CADEIA DE CUST√ìDIA
   - Registro imut√°vel de todas as a√ß√µes
   - Rastreabilidade completa
   - Valida√ß√£o de integridade da cadeia
   - Auditoria forense

5. VALIDA√á√ÉO DE DADOS
   - Pipes de valida√ß√£o globais
   - Sanitiza√ß√£o de entrada
   - Whitelist de propriedades
   - Transforma√ß√£o autom√°tica de tipos

6. CONFIGURA√á√ÉO SEGURA
   - Vari√°veis de ambiente para dados sens√≠veis
   - Chaves PGP protegidas por passphrase
   - Configura√ß√£o CORS restritiva

üìÅ ARMAZENAMENTO DE ARQUIVOS
===============================================================================
- Diret√≥rio: ./uploads (configur√°vel via UPLOAD_PATH)
- Nomenclatura: file-{timestamp}-{uuid}.{extens√£o}
- Limite de tamanho: 100MB (configur√°vel via MAX_FILE_SIZE)
- Tipos suportados: Todos os formatos de arquivo
- Metadados EXIF extra√≠dos automaticamente

üîß CONFIGURA√á√ïES PRINCIPAIS
===============================================================================
Vari√°veis de Ambiente (.env):
- DATABASE_URL: Conex√£o com banco de dados
- PORT: Porta da aplica√ß√£o (padr√£o: 3000)
- UPLOAD_PATH: Diret√≥rio de uploads (padr√£o: ./uploads)
- MAX_FILE_SIZE: Tamanho m√°ximo de arquivo (padr√£o: 104857600)
- PGP_PRIVATE_KEY_PATH: Caminho da chave privada PGP
- PGP_PUBLIC_KEY_PATH: Caminho da chave p√∫blica PGP
- PGP_PASSPHRASE: Passphrase das chaves PGP
- CORS_ORIGIN: Origens permitidas para CORS
- SWAGGER_TITLE: T√≠tulo da documenta√ß√£o
- SWAGGER_DESCRIPTION: Descri√ß√£o da API
- SWAGGER_VERSION: Vers√£o da documenta√ß√£o
- SWAGGER_PATH: Caminho da documenta√ß√£o (padr√£o: api/docs)

üìà FUNCIONALIDADES AVAN√áADAS
===============================================================================

1. VERIFICA√á√ÉO COMPLETA
   - An√°lise multi-camada de evid√™ncias
   - Pontua√ß√£o de confian√ßa algor√≠tmica
   - Relat√≥rios detalhados com recomenda√ß√µes
   - Detec√ß√£o autom√°tica de problemas

2. RELAT√ìRIOS FORENSES
   - Cadeia de cust√≥dia completa
   - Estat√≠sticas de manipula√ß√£o
   - Valida√ß√£o de integridade
   - Exporta√ß√£o de dados

3. METADADOS AVAN√áADOS
   - Extra√ß√£o EXIF completa
   - Informa√ß√µes de dispositivo
   - Dados de localiza√ß√£o (GPS)
   - Timestamps originais

4. AUDITORIA E COMPLIANCE
   - Logs imut√°veis de todas as a√ß√µes
   - Rastreabilidade completa
   - Conformidade forense
   - Prova legal de integridade

üöÄ STATUS ATUAL
===============================================================================
‚úÖ Aplica√ß√£o rodando na porta 3000
‚úÖ Banco de dados conectado (SQLite)
‚úÖ Documenta√ß√£o Swagger dispon√≠vel
‚úÖ Upload de arquivos funcionando
‚úÖ Gera√ß√£o autom√°tica de chaves PGP
‚úÖ Todos os m√≥dulos integrados
‚úÖ Valida√ß√£o e sanitiza√ß√£o ativas
‚úÖ CORS configurado
‚úÖ Health check ativo

üìö DOCUMENTA√á√ÉO T√âCNICA
===============================================================================
- Swagger UI: http://localhost:3000/api/docs
- Schemas de valida√ß√£o: class-validator + class-transformer
- ORM: Prisma Client
- Testes: Jest (configurado)
- Linting: ESLint + Prettier
- Build: TypeScript + Nest CLI

üîÑ SCRIPTS DISPON√çVEIS
===============================================================================
- npm run start:dev: Desenvolvimento com hot-reload
- npm run start:prod: Produ√ß√£o
- npm run build: Build da aplica√ß√£o
- npm run test: Executar testes
- npm run lint: Linting do c√≥digo
- npm run prisma:generate: Gerar cliente Prisma
- npm run prisma:push: Sincronizar schema
- npm run prisma:studio: Interface visual do banco

===============================================================================
                        RESUMO GERADO EM: 2025-01-10
===============================================================================